package facturation;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



import facturation.dao.FacturationDao;
import facturation.entities.Adresse;

import facturation.entities.Facture;
import facturation.entities.Ligne;
import facturation.entities.Particulie;
import facturation.entities.Piece;
import facturation.entities.Professionnel;
import facturation.service.FacturationService;
import facturation.service.FactureFileService;
import facturation.formulaires.FormulairePiece;
import facturation.formulaires.FormulaireParticulie;
import facturation.formulaires.FormulaireProfessionnel;
import java.awt.CardLayout;
import java.awt.Container;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;



/**
 *
 * @author tayeb
 */
public class FactureUI extends javax.swing.JFrame implements Observateur{
   
    
    
    protected FacturationService fs;
    protected ArrayList<Ligne> lignes=new ArrayList<>();
    protected int lignesIndex = 0; 
    protected Facture selectedFacture;
    protected FactureFileService ffs;
    protected Process p;
    protected TableRowSorter<TableModel> sorterPiece;
    protected TableRowSorter<TableModel> sorterParticulie;
    protected TableRowSorter<TableModel> sorterProfessionnel;
    protected TableRowSorter<TableModel> sorterFactureParticulier;
    protected TableRowSorter<TableModel> sorterFactureProfessionnel;
    protected LigneTableModel modelLigne;
  
    /**
     * Creates new form Facture
     */
    public FactureUI() {
        
        
        initComponents();
        
        this.sorterPiece = new TableRowSorter<>(this.piecesJTable.getModel());
        this.piecesJTable.setRowSorter(sorterPiece);
        
        this.sorterParticulie = new TableRowSorter<>(this.particulieJTable.getModel());
        this.particulieJTable.setRowSorter(sorterParticulie);
        
        this.sorterProfessionnel = new TableRowSorter<>(this.professionnelJTable.getModel());
        this.professionnelJTable.setRowSorter(sorterProfessionnel);
        
        this.sorterFactureProfessionnel = new TableRowSorter<>(this.facturesProfessionnelsJTable.getModel());
        this.facturesProfessionnelsJTable.setRowSorter(sorterFactureProfessionnel);
        
        this.sorterFactureParticulier = new TableRowSorter<>(this.facturesParticulieJTable.getModel());
        this.facturesParticulieJTable.setRowSorter(sorterFactureParticulier);
        
        this.setLocationRelativeTo(null);
        fs = new FacturationService();
        FacturationDao dao = new FacturationDao(this.entityManager);
        fs.setDao(dao);
        ffs =new FactureFileService();
        
        
        
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("centre_auto_piece_PUN").createEntityManager();
        pieceQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM Piece p");
        pieceList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(pieceQuery.getResultList());
        filtrePieceBG = new javax.swing.ButtonGroup();
        particulieQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM Particulie  p");
        particulieList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(particulieQuery.getResultList());
        professionnelQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM Professionnel  p");
        professionnelList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(professionnelQuery.getResultList());
        filtreProfessionnelBG = new javax.swing.ButtonGroup();
        professionnelFactureList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(professionnelQuery.getResultList());
        factureProfessionnelQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT f FROM FactureProfessionnel f");
        factureProfessionnelList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(factureProfessionnelQuery.getResultList());
        factureParticulierQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT f FROM FactureParticulier f");
        factureParticulierList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(factureParticulierQuery.getResultList());
        fitreParticulierBG = new javax.swing.ButtonGroup();
        filtreFactureParticulierBG = new javax.swing.ButtonGroup();
        filtreFactureProfessionnelBG = new javax.swing.ButtonGroup();
        piecesCardJP = new javax.swing.JPanel();
        conteneurStockJP = new javax.swing.JPanel();
        stockJP = new javax.swing.JPanel();
        ajoutModificationJP = new javax.swing.JPanel();
        referencePieceJT = new javax.swing.JTextField();
        designationPieceJT = new javax.swing.JTextField();
        prixAchatPieceJT = new javax.swing.JTextField();
        refernceJL = new javax.swing.JLabel();
        designationJL = new javax.swing.JLabel();
        marqueJL = new javax.swing.JLabel();
        quantiteJL = new javax.swing.JLabel();
        prixAchatJL = new javax.swing.JLabel();
        marquePieceJT = new javax.swing.JTextField();
        quantiteJT = new javax.swing.JTextField();
        prixVenteJL = new javax.swing.JLabel();
        prixVentePieceJT = new javax.swing.JTextField();
        ajouterPieceJB = new javax.swing.JButton();
        modifierPieceJB = new javax.swing.JButton();
        supprimerPieceJB = new javax.swing.JButton();
        recherchePieceJP = new javax.swing.JPanel();
        referenceJRB = new javax.swing.JRadioButton();
        designationJRB = new javax.swing.JRadioButton();
        marqueJRB = new javax.swing.JRadioButton();
        recherchePieceJTF = new javax.swing.JTextField();
        piecesJSP = new javax.swing.JScrollPane();
        piecesJTable = new javax.swing.JTable();
        clientsJP = new javax.swing.JPanel();
        clientsJTP = new javax.swing.JTabbedPane();
        particuliesTabJP = new javax.swing.JPanel();
        conteneurParticulieJP = new javax.swing.JPanel();
        particuliesJSP = new javax.swing.JScrollPane();
        particulieJTable = new javax.swing.JTable();
        particuliesJP = new javax.swing.JPanel();
        nomJL = new javax.swing.JLabel();
        nomJTF = new javax.swing.JTextField();
        prenomJL = new javax.swing.JLabel();
        prenomJTF = new javax.swing.JTextField();
        villeJL = new javax.swing.JLabel();
        villeJTF = new javax.swing.JTextField();
        lieuJL = new javax.swing.JLabel();
        lieuJSP = new javax.swing.JScrollPane();
        lieuJTA = new javax.swing.JTextArea();
        codePostalJL = new javax.swing.JLabel();
        codePostalJTF = new javax.swing.JTextField();
        supprimerParticulieJB = new javax.swing.JButton();
        ajouterParticulieJB = new javax.swing.JButton();
        modifierParticulieJB = new javax.swing.JButton();
        rechercheParticulierJP = new javax.swing.JPanel();
        nomJRB = new javax.swing.JRadioButton();
        prenomJRB = new javax.swing.JRadioButton();
        rechercheParticulierJTF = new javax.swing.JTextField();
        professionnelsTabJP = new javax.swing.JPanel();
        conteneurProfessionnelJP = new javax.swing.JPanel();
        professionnelsJSP = new javax.swing.JScrollPane();
        professionnelJTable = new javax.swing.JTable();
        professionnelsJP = new javax.swing.JPanel();
        siretJL = new javax.swing.JLabel();
        siretJTF = new javax.swing.JTextField();
        nomSocieteJL = new javax.swing.JLabel();
        nomSocieteJTF = new javax.swing.JTextField();
        villeSocieteJL = new javax.swing.JLabel();
        villeSocieteJTF = new javax.swing.JTextField();
        lieuSocieteJL = new javax.swing.JLabel();
        lieuSocieteJSP = new javax.swing.JScrollPane();
        lieuSocieteJTA = new javax.swing.JTextArea();
        codePostalSocieteJL = new javax.swing.JLabel();
        codePostalSocieteJTF = new javax.swing.JTextField();
        supprimerProfessionnelJB = new javax.swing.JButton();
        ajouterProfessionnelJB = new javax.swing.JButton();
        modifierProfessionnelJB = new javax.swing.JButton();
        rechercheProfessionnelJP = new javax.swing.JPanel();
        nomSocieteJRB = new javax.swing.JRadioButton();
        siretJRB = new javax.swing.JRadioButton();
        rechercheProfessionnelJTF = new javax.swing.JTextField();
        facturesCardJP = new javax.swing.JPanel();
        facturesJTabbedPane = new javax.swing.JTabbedPane();
        facturePriticulieJP = new javax.swing.JPanel();
        ajouterParticulieJP = new javax.swing.JPanel();
        ajouterFacturePArticulieJB = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        facturesParticulieJSP = new javax.swing.JScrollPane();
        facturesParticulieJTable = new javax.swing.JTable();
        rechercheFactureParticulierJP = new javax.swing.JPanel();
        numeroFactureParticulierJRB = new javax.swing.JRadioButton();
        nomFactureParticulierJRB = new javax.swing.JRadioButton();
        rechercheFactureParticulierJTF = new javax.swing.JTextField();
        dateFacturationParticulierJRB = new javax.swing.JRadioButton();
        dateLivraisonParticulierJRB = new javax.swing.JRadioButton();
        factureProfessionnelJP = new javax.swing.JPanel();
        ajouterFactureJP = new javax.swing.JPanel();
        ajouterFactureProfessionnelJB = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        facturesProfessionnelsJSP = new javax.swing.JScrollPane();
        facturesProfessionnelsJTable = new javax.swing.JTable();
        rechercheFactureProfessionnelJP = new javax.swing.JPanel();
        numeroFactureProfessionnelJRB = new javax.swing.JRadioButton();
        nomSocieteFactureProfessionnelJRB = new javax.swing.JRadioButton();
        siretFactureProfessionnelJRB = new javax.swing.JRadioButton();
        rechercheFactureProfessionnelJTF = new javax.swing.JTextField();
        dateFacturationProfessionnelJRB = new javax.swing.JRadioButton();
        dateLivraisonProfessionnelJRB = new javax.swing.JRadioButton();
        appJMenuBar = new javax.swing.JMenuBar();
        accueilJM = new javax.swing.JMenu();
        piecesJMI = new javax.swing.JMenuItem();
        clientsJMI = new javax.swing.JMenuItem();
        factureJMI = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Facturation");
        setName("mainJF"); // NOI18N
        getContentPane().setLayout(new java.awt.CardLayout());

        conteneurStockJP.setLayout(new javax.swing.BoxLayout(conteneurStockJP, javax.swing.BoxLayout.LINE_AXIS));

        stockJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Stock", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        ajoutModificationJP.setBackground(new java.awt.Color(255, 255, 255));
        ajoutModificationJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ajout / Modification des pieces", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, piecesJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.reference}"), referencePieceJT, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, piecesJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.designation}"), designationPieceJT, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, piecesJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.prixAchat}"), prixAchatPieceJT, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        refernceJL.setText("Référence");

        designationJL.setText("Désignation");

        marqueJL.setText("Marque");

        quantiteJL.setText("Quantité");

        prixAchatJL.setText("Prix d'achat");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, piecesJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.marque}"), marquePieceJT, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, piecesJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.quantite}"), quantiteJT, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        prixVenteJL.setText("Prix de vente");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, piecesJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.prixVente}"), prixVentePieceJT, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        ajouterPieceJB.setText("Ajouter ");
        ajouterPieceJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterPieceJBActionPerformed(evt);
            }
        });

        modifierPieceJB.setText("modifier");
        modifierPieceJB.setEnabled(false);
        modifierPieceJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierPieceJBActionPerformed(evt);
            }
        });

        supprimerPieceJB.setText("supprimer pièce ");
        supprimerPieceJB.setEnabled(false);
        supprimerPieceJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerPieceJBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ajoutModificationJPLayout = new javax.swing.GroupLayout(ajoutModificationJP);
        ajoutModificationJP.setLayout(ajoutModificationJPLayout);
        ajoutModificationJPLayout.setHorizontalGroup(
            ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ajoutModificationJPLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prixVenteJL)
                    .addComponent(prixAchatJL)
                    .addComponent(quantiteJL)
                    .addComponent(marqueJL)
                    .addComponent(designationJL)
                    .addComponent(refernceJL))
                .addGap(24, 24, 24)
                .addGroup(ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(designationPieceJT, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(referencePieceJT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(marquePieceJT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(quantiteJT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(prixVentePieceJT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prixAchatPieceJT, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ajoutModificationJPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ajouterPieceJB)
                .addGap(18, 18, 18)
                .addComponent(supprimerPieceJB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modifierPieceJB, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ajoutModificationJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {designationPieceJT, marquePieceJT, prixAchatPieceJT, prixVentePieceJT, quantiteJT, referencePieceJT});

        ajoutModificationJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {designationJL, marqueJL, prixAchatJL, prixVenteJL, quantiteJL, refernceJL});

        ajoutModificationJPLayout.setVerticalGroup(
            ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ajoutModificationJPLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refernceJL, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(referencePieceJT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(designationPieceJT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(designationJL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(marqueJL)
                    .addComponent(marquePieceJT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantiteJL)
                    .addComponent(quantiteJT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prixAchatJL)
                    .addComponent(prixAchatPieceJT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prixVenteJL)
                    .addComponent(prixVentePieceJT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(ajoutModificationJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ajouterPieceJB)
                    .addComponent(modifierPieceJB)
                    .addComponent(supprimerPieceJB))
                .addContainerGap())
        );

        ajoutModificationJPLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {designationPieceJT, marquePieceJT, prixAchatPieceJT, prixVentePieceJT, quantiteJT, referencePieceJT});

        ajoutModificationJPLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {designationJL, marqueJL, prixAchatJL, prixVenteJL, quantiteJL, refernceJL});

        recherchePieceJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Rechercher Par ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        filtrePieceBG.add(referenceJRB);
        referenceJRB.setSelected(true);
        referenceJRB.setText("Référence");
        referenceJRB.setToolTipText("");

        filtrePieceBG.add(designationJRB);
        designationJRB.setText("Désignation");

        filtrePieceBG.add(marqueJRB);
        marqueJRB.setText("Marque");

        recherchePieceJTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recherchePieceJTFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout recherchePieceJPLayout = new javax.swing.GroupLayout(recherchePieceJP);
        recherchePieceJP.setLayout(recherchePieceJPLayout);
        recherchePieceJPLayout.setHorizontalGroup(
            recherchePieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recherchePieceJPLayout.createSequentialGroup()
                .addGroup(recherchePieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(recherchePieceJPLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(referenceJRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(designationJRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(marqueJRB))
                    .addGroup(recherchePieceJPLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(recherchePieceJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(614, Short.MAX_VALUE))
        );

        recherchePieceJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {designationJRB, marqueJRB, referenceJRB});

        recherchePieceJPLayout.setVerticalGroup(
            recherchePieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recherchePieceJPLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(recherchePieceJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(referenceJRB)
                    .addComponent(designationJRB)
                    .addComponent(marqueJRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recherchePieceJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        recherchePieceJPLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {designationJRB, marqueJRB, referenceJRB});

        piecesJSP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Liste des pièces", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        piecesJTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        piecesJTable.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        piecesJTable.setRowHeight(20);
        piecesJTable.setRowSorter(sorterPiece);
        piecesJTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        piecesJTable.setShowVerticalLines(true);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, pieceList, piecesJTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id_piece}"));
        columnBinding.setColumnName("N° Piece");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${reference}"));
        columnBinding.setColumnName("Reference");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${designation}"));
        columnBinding.setColumnName("Designation");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${marque}"));
        columnBinding.setColumnName("Marque");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${prixAchat}"));
        columnBinding.setColumnName("Prix Achat");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${prixVente}"));
        columnBinding.setColumnName("Prix Vente");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${quantite}"));
        columnBinding.setColumnName("Quantite");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        piecesJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                piecesJTableMousePressed(evt);
            }
        });
        piecesJSP.setViewportView(piecesJTable);

        javax.swing.GroupLayout stockJPLayout = new javax.swing.GroupLayout(stockJP);
        stockJP.setLayout(stockJPLayout);
        stockJPLayout.setHorizontalGroup(
            stockJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(stockJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(recherchePieceJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(stockJPLayout.createSequentialGroup()
                        .addComponent(ajoutModificationJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(piecesJSP)))
                .addContainerGap())
        );
        stockJPLayout.setVerticalGroup(
            stockJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(recherchePieceJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(stockJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ajoutModificationJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(piecesJSP, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        conteneurStockJP.add(stockJP);

        piecesCardJP.add(conteneurStockJP);

        getContentPane().add(piecesCardJP, "piecesCard");

        clientsJP.setLayout(new java.awt.BorderLayout());

        particuliesTabJP.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        conteneurParticulieJP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        particuliesJSP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Réréptroir des particuliers", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        particulieJTable.setRowHeight(19);
        particulieJTable.setRowMargin(2);
        particulieJTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, particulieList, particulieJTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("N°");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nom}"));
        columnBinding.setColumnName("Nom");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${prenom}"));
        columnBinding.setColumnName("Prénom");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${adresse.lieu}"));
        columnBinding.setColumnName("Lieu");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${adresse.ville}"));
        columnBinding.setColumnName("Ville");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${adresse.cp}"));
        columnBinding.setColumnName("CP");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        particulieJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                particulieJTableMousePressed(evt);
            }
        });
        particuliesJSP.setViewportView(particulieJTable);

        particuliesJP.setBackground(new java.awt.Color(255, 255, 255));
        particuliesJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ajout / Modification d'un particulier", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        nomJL.setText("Nom");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, particulieJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nom}"), nomJTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        prenomJL.setText("Prénom");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, particulieJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.prenom}"), prenomJTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        villeJL.setText("Ville");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, particulieJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.adresse.ville}"), villeJTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lieuJL.setText("Lieu");

        lieuJTA.setColumns(20);
        lieuJTA.setRows(5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, particulieJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.adresse.lieu}"), lieuJTA, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lieuJSP.setViewportView(lieuJTA);

        codePostalJL.setText("Code postal");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, particulieJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.adresse.cp}"), codePostalJTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        supprimerParticulieJB.setText("Supprimer");
        supprimerParticulieJB.setEnabled(false);
        supprimerParticulieJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerParticulieJBActionPerformed(evt);
            }
        });

        ajouterParticulieJB.setText("Ajouter");
        ajouterParticulieJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterParticulieJBActionPerformed(evt);
            }
        });

        modifierParticulieJB.setText("Modifier");
        modifierParticulieJB.setEnabled(false);
        modifierParticulieJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierParticulieJBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout particuliesJPLayout = new javax.swing.GroupLayout(particuliesJP);
        particuliesJP.setLayout(particuliesJPLayout);
        particuliesJPLayout.setHorizontalGroup(
            particuliesJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, particuliesJPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(particuliesJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prenomJL)
                    .addComponent(nomJL)
                    .addComponent(villeJL)
                    .addComponent(lieuJL)
                    .addComponent(codePostalJL)
                    .addComponent(ajouterParticulieJB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(particuliesJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, particuliesJPLayout.createSequentialGroup()
                        .addComponent(supprimerParticulieJB, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(modifierParticulieJB))
                    .addComponent(nomJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prenomJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(villeJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codePostalJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lieuJSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        particuliesJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {nomJL, prenomJL});

        particuliesJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {codePostalJTF, lieuJSP, nomJTF, prenomJTF, villeJTF});

        particuliesJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ajouterParticulieJB, modifierParticulieJB, supprimerParticulieJB});

        particuliesJPLayout.setVerticalGroup(
            particuliesJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(particuliesJPLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(particuliesJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomJL))
                .addGap(18, 18, 18)
                .addGroup(particuliesJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prenomJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prenomJL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(particuliesJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lieuJL)
                    .addComponent(lieuJSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(particuliesJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(villeJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(villeJL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(particuliesJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codePostalJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codePostalJL))
                .addGap(16, 16, 16)
                .addGroup(particuliesJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supprimerParticulieJB)
                    .addComponent(modifierParticulieJB)
                    .addComponent(ajouterParticulieJB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rechercheParticulierJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Rechercher Par ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        fitreParticulierBG.add(nomJRB);
        nomJRB.setSelected(true);
        nomJRB.setText("Nom");

        fitreParticulierBG.add(prenomJRB);
        prenomJRB.setText("Prénom");

        rechercheParticulierJTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercheParticulierJTFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rechercheParticulierJPLayout = new javax.swing.GroupLayout(rechercheParticulierJP);
        rechercheParticulierJP.setLayout(rechercheParticulierJPLayout);
        rechercheParticulierJPLayout.setHorizontalGroup(
            rechercheParticulierJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercheParticulierJPLayout.createSequentialGroup()
                .addGroup(rechercheParticulierJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rechercheParticulierJPLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(nomJRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prenomJRB))
                    .addGroup(rechercheParticulierJPLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rechercheParticulierJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rechercheParticulierJPLayout.setVerticalGroup(
            rechercheParticulierJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercheParticulierJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(rechercheParticulierJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomJRB)
                    .addComponent(prenomJRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rechercheParticulierJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout conteneurParticulieJPLayout = new javax.swing.GroupLayout(conteneurParticulieJP);
        conteneurParticulieJP.setLayout(conteneurParticulieJPLayout);
        conteneurParticulieJPLayout.setHorizontalGroup(
            conteneurParticulieJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conteneurParticulieJPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(conteneurParticulieJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rechercheParticulierJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(conteneurParticulieJPLayout.createSequentialGroup()
                        .addComponent(particuliesJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(particuliesJSP, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)))
                .addGap(12, 12, 12))
        );
        conteneurParticulieJPLayout.setVerticalGroup(
            conteneurParticulieJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, conteneurParticulieJPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rechercheParticulierJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(conteneurParticulieJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(particuliesJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(particuliesJSP, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout particuliesTabJPLayout = new javax.swing.GroupLayout(particuliesTabJP);
        particuliesTabJP.setLayout(particuliesTabJPLayout);
        particuliesTabJPLayout.setHorizontalGroup(
            particuliesTabJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, particuliesTabJPLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(conteneurParticulieJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        particuliesTabJPLayout.setVerticalGroup(
            particuliesTabJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(particuliesTabJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(conteneurParticulieJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        clientsJTP.addTab("Particuliers", particuliesTabJP);

        conteneurProfessionnelJP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        professionnelsJSP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Répértoir des professionnels", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        professionnelJTable.setRowHeight(19);
        professionnelJTable.setRowMargin(2);
        professionnelJTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelList, professionnelJTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("N°");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${siret}"));
        columnBinding.setColumnName("Siret");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nomSociete}"));
        columnBinding.setColumnName("Société");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${adresse.lieu}"));
        columnBinding.setColumnName("Lieu");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${adresse.ville}"));
        columnBinding.setColumnName("Ville");
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${adresse.cp}"));
        columnBinding.setColumnName("CP");
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        professionnelJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                professionnelJTableMousePressed(evt);
            }
        });
        professionnelsJSP.setViewportView(professionnelJTable);

        professionnelsJP.setBackground(new java.awt.Color(255, 255, 255));
        professionnelsJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ajout / Modification professionnel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        siretJL.setText("Siret");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.siret}"), siretJTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        nomSocieteJL.setText("Société");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nomSociete}"), nomSocieteJTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        villeSocieteJL.setText("Ville");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.adresse.ville}"), villeSocieteJTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lieuSocieteJL.setText("Lieu");

        lieuSocieteJTA.setColumns(20);
        lieuSocieteJTA.setRows(5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.adresse.lieu}"), lieuSocieteJTA, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        lieuSocieteJSP.setViewportView(lieuSocieteJTA);

        codePostalSocieteJL.setText("Code postal");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, professionnelJTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.adresse.cp}"), codePostalSocieteJTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        supprimerProfessionnelJB.setText("Supprimer");
        supprimerProfessionnelJB.setEnabled(false);
        supprimerProfessionnelJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerProfessionnelJBActionPerformed(evt);
            }
        });

        ajouterProfessionnelJB.setText("Ajouter");
        ajouterProfessionnelJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterProfessionnelJBActionPerformed(evt);
            }
        });

        modifierProfessionnelJB.setText("Modifier");
        modifierProfessionnelJB.setEnabled(false);
        modifierProfessionnelJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierProfessionnelJBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout professionnelsJPLayout = new javax.swing.GroupLayout(professionnelsJP);
        professionnelsJP.setLayout(professionnelsJPLayout);
        professionnelsJPLayout.setHorizontalGroup(
            professionnelsJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, professionnelsJPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(professionnelsJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomSocieteJL)
                    .addComponent(siretJL)
                    .addComponent(villeSocieteJL)
                    .addComponent(lieuSocieteJL)
                    .addComponent(codePostalSocieteJL)
                    .addComponent(ajouterProfessionnelJB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(professionnelsJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, professionnelsJPLayout.createSequentialGroup()
                        .addComponent(supprimerProfessionnelJB, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(modifierProfessionnelJB))
                    .addComponent(siretJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomSocieteJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(villeSocieteJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codePostalSocieteJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lieuSocieteJSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        professionnelsJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {codePostalSocieteJTF, lieuSocieteJSP, nomSocieteJTF, siretJTF, villeSocieteJTF});

        professionnelsJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ajouterProfessionnelJB, modifierProfessionnelJB, supprimerProfessionnelJB});

        professionnelsJPLayout.setVerticalGroup(
            professionnelsJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(professionnelsJPLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(professionnelsJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(siretJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(siretJL))
                .addGap(18, 18, 18)
                .addGroup(professionnelsJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomSocieteJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomSocieteJL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(professionnelsJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lieuSocieteJL)
                    .addComponent(lieuSocieteJSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(professionnelsJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(villeSocieteJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(villeSocieteJL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(professionnelsJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codePostalSocieteJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codePostalSocieteJL))
                .addGap(16, 16, 16)
                .addGroup(professionnelsJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supprimerProfessionnelJB)
                    .addComponent(modifierProfessionnelJB)
                    .addComponent(ajouterProfessionnelJB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rechercheProfessionnelJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Rechercher Par ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        filtreProfessionnelBG.add(nomSocieteJRB);
        nomSocieteJRB.setSelected(true);
        nomSocieteJRB.setText("Nom de société");

        filtreProfessionnelBG.add(siretJRB);
        siretJRB.setText("Siret");

        rechercheProfessionnelJTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercheProfessionnelJTFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rechercheProfessionnelJPLayout = new javax.swing.GroupLayout(rechercheProfessionnelJP);
        rechercheProfessionnelJP.setLayout(rechercheProfessionnelJPLayout);
        rechercheProfessionnelJPLayout.setHorizontalGroup(
            rechercheProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercheProfessionnelJPLayout.createSequentialGroup()
                .addGroup(rechercheProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rechercheProfessionnelJPLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(nomSocieteJRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(siretJRB))
                    .addGroup(rechercheProfessionnelJPLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rechercheProfessionnelJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rechercheProfessionnelJPLayout.setVerticalGroup(
            rechercheProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercheProfessionnelJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(rechercheProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomSocieteJRB)
                    .addComponent(siretJRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rechercheProfessionnelJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout conteneurProfessionnelJPLayout = new javax.swing.GroupLayout(conteneurProfessionnelJP);
        conteneurProfessionnelJP.setLayout(conteneurProfessionnelJPLayout);
        conteneurProfessionnelJPLayout.setHorizontalGroup(
            conteneurProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conteneurProfessionnelJPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(conteneurProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(conteneurProfessionnelJPLayout.createSequentialGroup()
                        .addComponent(professionnelsJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(professionnelsJSP, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE))
                    .addComponent(rechercheProfessionnelJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        conteneurProfessionnelJPLayout.setVerticalGroup(
            conteneurProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, conteneurProfessionnelJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(rechercheProfessionnelJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(conteneurProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(professionnelsJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(professionnelsJSP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        conteneurProfessionnelJPLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {professionnelsJP, professionnelsJSP});

        javax.swing.GroupLayout professionnelsTabJPLayout = new javax.swing.GroupLayout(professionnelsTabJP);
        professionnelsTabJP.setLayout(professionnelsTabJPLayout);
        professionnelsTabJPLayout.setHorizontalGroup(
            professionnelsTabJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(professionnelsTabJPLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(conteneurProfessionnelJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        professionnelsTabJPLayout.setVerticalGroup(
            professionnelsTabJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(professionnelsTabJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(conteneurProfessionnelJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
        );

        clientsJTP.addTab("Professionnels", professionnelsTabJP);

        clientsJP.add(clientsJTP, java.awt.BorderLayout.CENTER);

        getContentPane().add(clientsJP, "clientsCard");

        facturesCardJP.setLayout(new java.awt.BorderLayout());

        facturesJTabbedPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        facturesJTabbedPane.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        facturePriticulieJP.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        ajouterParticulieJP.setMinimumSize(new java.awt.Dimension(192, 110));
        ajouterParticulieJP.setPreferredSize(new java.awt.Dimension(192, 110));
        ajouterParticulieJP.setLayout(new java.awt.GridLayout(3, 0, 12, 10));

        ajouterFacturePArticulieJB.setText("Facturer un particulier");
        ajouterFacturePArticulieJB.setPreferredSize(new java.awt.Dimension(58, 30));
        ajouterFacturePArticulieJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterFacturePArticulieJBActionPerformed(evt);
            }
        });
        ajouterParticulieJP.add(ajouterFacturePArticulieJB);

        jButton4.setText("Stocks");
        ajouterParticulieJP.add(jButton4);

        jButton5.setText("Clients");
        ajouterParticulieJP.add(jButton5);

        facturesParticulieJSP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Factures Particuliers", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        facturesParticulieJTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, factureParticulierList, facturesParticulieJTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numero_facture}"));
        columnBinding.setColumnName("N° Facture");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${client.nom} ${client.prenom}"));
        columnBinding.setColumnName("Client");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${date_facturation}"));
        columnBinding.setColumnName("Date de facturation");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${date_livraison}"));
        columnBinding.setColumnName("Date de livraison");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${mode_payement}"));
        columnBinding.setColumnName("Réglement");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${totalHT}"));
        columnBinding.setColumnName("Total HT");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${totalTVA}"));
        columnBinding.setColumnName("Total TVA");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${totalTTC}"));
        columnBinding.setColumnName("Total TTC");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        facturesParticulieJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                facturesParticulieJTableMouseClicked(evt);
            }
        });
        facturesParticulieJSP.setViewportView(facturesParticulieJTable);
        if (facturesParticulieJTable.getColumnModel().getColumnCount() > 0) {
            facturesParticulieJTable.getColumnModel().getColumn(5).setPreferredWidth(4);
        }

        rechercheFactureParticulierJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Rechercher Par ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));

        numeroFactureParticulierJRB.setBackground(new java.awt.Color(255, 255, 255));
        filtreFactureParticulierBG.add(numeroFactureParticulierJRB);
        numeroFactureParticulierJRB.setText("N° Facture");
        numeroFactureParticulierJRB.setToolTipText("");

        nomFactureParticulierJRB.setBackground(new java.awt.Color(255, 255, 255));
        filtreFactureParticulierBG.add(nomFactureParticulierJRB);
        nomFactureParticulierJRB.setSelected(true);
        nomFactureParticulierJRB.setText("Client");

        rechercheFactureParticulierJTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercheFactureParticulierJTFActionPerformed(evt);
            }
        });

        dateFacturationParticulierJRB.setBackground(new java.awt.Color(255, 255, 255));
        filtreFactureParticulierBG.add(dateFacturationParticulierJRB);
        dateFacturationParticulierJRB.setText("Date de facturation");

        dateLivraisonParticulierJRB.setBackground(new java.awt.Color(255, 255, 255));
        filtreFactureParticulierBG.add(dateLivraisonParticulierJRB);
        dateLivraisonParticulierJRB.setText("Date de livraison");

        javax.swing.GroupLayout rechercheFactureParticulierJPLayout = new javax.swing.GroupLayout(rechercheFactureParticulierJP);
        rechercheFactureParticulierJP.setLayout(rechercheFactureParticulierJPLayout);
        rechercheFactureParticulierJPLayout.setHorizontalGroup(
            rechercheFactureParticulierJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercheFactureParticulierJPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rechercheFactureParticulierJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rechercheFactureParticulierJPLayout.createSequentialGroup()
                        .addComponent(nomFactureParticulierJRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFacturationParticulierJRB)
                        .addGap(12, 12, 12)
                        .addComponent(dateLivraisonParticulierJRB, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numeroFactureParticulierJRB))
                    .addComponent(rechercheFactureParticulierJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(179, Short.MAX_VALUE))
        );

        rechercheFactureParticulierJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateFacturationParticulierJRB, dateLivraisonParticulierJRB, nomFactureParticulierJRB, numeroFactureParticulierJRB});

        rechercheFactureParticulierJPLayout.setVerticalGroup(
            rechercheFactureParticulierJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercheFactureParticulierJPLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(rechercheFactureParticulierJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numeroFactureParticulierJRB)
                    .addComponent(nomFactureParticulierJRB)
                    .addComponent(dateFacturationParticulierJRB)
                    .addComponent(dateLivraisonParticulierJRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rechercheFactureParticulierJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout facturePriticulieJPLayout = new javax.swing.GroupLayout(facturePriticulieJP);
        facturePriticulieJP.setLayout(facturePriticulieJPLayout);
        facturePriticulieJPLayout.setHorizontalGroup(
            facturePriticulieJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facturePriticulieJPLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(facturePriticulieJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(facturesParticulieJSP)
                    .addGroup(facturePriticulieJPLayout.createSequentialGroup()
                        .addComponent(rechercheFactureParticulierJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ajouterParticulieJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        facturePriticulieJPLayout.setVerticalGroup(
            facturePriticulieJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(facturePriticulieJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(facturePriticulieJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rechercheFactureParticulierJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ajouterParticulieJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(facturesParticulieJSP, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );

        facturePriticulieJPLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ajouterParticulieJP, rechercheFactureParticulierJP});

        facturesJTabbedPane.addTab("Facture Particulier", facturePriticulieJP);

        factureProfessionnelJP.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        ajouterFactureJP.setLayout(new java.awt.GridLayout(3, 0, 12, 10));

        ajouterFactureProfessionnelJB.setText("Facturer un professionnel");
        ajouterFactureProfessionnelJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterFactureProfessionnelJBActionPerformed(evt);
            }
        });
        ajouterFactureJP.add(ajouterFactureProfessionnelJB);

        jButton2.setText("Stocks");
        ajouterFactureJP.add(jButton2);

        jButton3.setText("Clients");
        ajouterFactureJP.add(jButton3);

        facturesProfessionnelsJSP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Factures des professionnels", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, factureProfessionnelList, facturesProfessionnelsJTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${numero_facture}"));
        columnBinding.setColumnName("N° Facture");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${client.siret}"));
        columnBinding.setColumnName("SIRET");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${client.nomSociete}"));
        columnBinding.setColumnName("Société");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${date_facturation}"));
        columnBinding.setColumnName("Date de facturation");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${date_livraison}"));
        columnBinding.setColumnName("Date de livraison");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${mode_payement}"));
        columnBinding.setColumnName("Réglement");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${totalHT}"));
        columnBinding.setColumnName("Total HT");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${totalTVA}"));
        columnBinding.setColumnName("Total TVA");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${totalTTC}"));
        columnBinding.setColumnName("Total TTC");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        facturesProfessionnelsJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                facturesProfessionnelsJTableMouseClicked(evt);
            }
        });
        facturesProfessionnelsJSP.setViewportView(facturesProfessionnelsJTable);

        rechercheFactureProfessionnelJP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Rechercher Par ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));

        filtreFactureProfessionnelBG.add(numeroFactureProfessionnelJRB);
        numeroFactureProfessionnelJRB.setText("N° Facture");
        numeroFactureProfessionnelJRB.setToolTipText("");

        filtreFactureProfessionnelBG.add(nomSocieteFactureProfessionnelJRB);
        nomSocieteFactureProfessionnelJRB.setSelected(true);
        nomSocieteFactureProfessionnelJRB.setText("Société");

        filtreFactureProfessionnelBG.add(siretFactureProfessionnelJRB);
        siretFactureProfessionnelJRB.setText("N°SIRET");

        rechercheFactureProfessionnelJTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercheFactureProfessionnelJTFActionPerformed(evt);
            }
        });

        filtreFactureProfessionnelBG.add(dateFacturationProfessionnelJRB);
        dateFacturationProfessionnelJRB.setText("Date de facturation");

        filtreFactureProfessionnelBG.add(dateLivraisonProfessionnelJRB);
        dateLivraisonProfessionnelJRB.setText("Date de livraison");

        javax.swing.GroupLayout rechercheFactureProfessionnelJPLayout = new javax.swing.GroupLayout(rechercheFactureProfessionnelJP);
        rechercheFactureProfessionnelJP.setLayout(rechercheFactureProfessionnelJPLayout);
        rechercheFactureProfessionnelJPLayout.setHorizontalGroup(
            rechercheFactureProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercheFactureProfessionnelJPLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(rechercheFactureProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rechercheFactureProfessionnelJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(rechercheFactureProfessionnelJPLayout.createSequentialGroup()
                        .addComponent(nomSocieteFactureProfessionnelJRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(siretFactureProfessionnelJRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFacturationProfessionnelJRB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateLivraisonProfessionnelJRB, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numeroFactureProfessionnelJRB)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rechercheFactureProfessionnelJPLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateFacturationProfessionnelJRB, dateLivraisonProfessionnelJRB, nomSocieteFactureProfessionnelJRB, numeroFactureProfessionnelJRB, siretFactureProfessionnelJRB});

        rechercheFactureProfessionnelJPLayout.setVerticalGroup(
            rechercheFactureProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercheFactureProfessionnelJPLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(rechercheFactureProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomSocieteFactureProfessionnelJRB)
                    .addComponent(siretFactureProfessionnelJRB)
                    .addComponent(dateFacturationProfessionnelJRB)
                    .addComponent(dateLivraisonProfessionnelJRB)
                    .addComponent(numeroFactureProfessionnelJRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rechercheFactureProfessionnelJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout factureProfessionnelJPLayout = new javax.swing.GroupLayout(factureProfessionnelJP);
        factureProfessionnelJP.setLayout(factureProfessionnelJPLayout);
        factureProfessionnelJPLayout.setHorizontalGroup(
            factureProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(factureProfessionnelJPLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(factureProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(facturesProfessionnelsJSP, javax.swing.GroupLayout.DEFAULT_SIZE, 1076, Short.MAX_VALUE)
                    .addGroup(factureProfessionnelJPLayout.createSequentialGroup()
                        .addComponent(rechercheFactureProfessionnelJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ajouterFactureJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        factureProfessionnelJPLayout.setVerticalGroup(
            factureProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(factureProfessionnelJPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(factureProfessionnelJPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ajouterFactureJP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rechercheFactureProfessionnelJP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(facturesProfessionnelsJSP, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );

        facturesJTabbedPane.addTab("Facture Professionnel", factureProfessionnelJP);

        facturesCardJP.add(facturesJTabbedPane, java.awt.BorderLayout.PAGE_START);
        facturesJTabbedPane.getAccessibleContext().setAccessibleName("");

        getContentPane().add(facturesCardJP, "facturesCard");

        accueilJM.setText("Accueil");
        accueilJM.setToolTipText("");

        piecesJMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        piecesJMI.setText("Stock");
        piecesJMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piecesJMIActionPerformed(evt);
            }
        });
        accueilJM.add(piecesJMI);

        clientsJMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        clientsJMI.setText("Clients");
        clientsJMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientsJMIActionPerformed(evt);
            }
        });
        accueilJM.add(clientsJMI);

        factureJMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK));
        factureJMI.setText("Factures");
        factureJMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factureJMIActionPerformed(evt);
            }
        });
        accueilJM.add(factureJMI);

        appJMenuBar.add(accueilJM);

        setJMenuBar(appJMenuBar);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void piecesJMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piecesJMIActionPerformed
        changerCard("piecesCard");
    }//GEN-LAST:event_piecesJMIActionPerformed

    private void clientsJMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientsJMIActionPerformed
        changerCard("clientsCard");
    }//GEN-LAST:event_clientsJMIActionPerformed

    private void ajouterPieceJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterPieceJBActionPerformed
       ajouterPieceJtableRow();
       
       resetFormulairePiece();  
       this.recherchePieceJTFActionPerformed(evt);
    }//GEN-LAST:event_ajouterPieceJBActionPerformed

    private void modifierPieceJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierPieceJBActionPerformed
        
        String message ="êtes-vous sûr de vouloir modifier cette pièce?";
        String titre = "Modification de la pièce";
        
        int confirmation = JOptionPane.showConfirmDialog(this.conteneurStockJP,message,titre,JOptionPane.OK_CANCEL_OPTION);
        
        if(JOptionPane.OK_OPTION == confirmation )
        {
                FormulairePiece f = initFormulairePiece();
                Piece newPiece = null ;  
                if(f.hydrate().isEmpty())
                {
                    newPiece = f.getPiece();
                    
                    newPiece.setId_piece(selectedPiece().getId_piece());
                    
                    this.fs.updatePiece(newPiece);
                    updatePieceList();
                    
                    message ="La pièce a été modifiée";
                    JOptionPane.showMessageDialog(this.conteneurStockJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {
                    displayError(this.conteneurStockJP,f.validate());
                    message ="Opération Annulée";
                    JOptionPane.showMessageDialog(this.conteneurStockJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
                }
        }
        else
        {
            message ="Opération Annulée";
            JOptionPane.showMessageDialog(this.conteneurStockJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
        }
        
        resetFormulairePiece();
        
    }//GEN-LAST:event_modifierPieceJBActionPerformed

    private void supprimerPieceJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerPieceJBActionPerformed
        
        FormulairePiece f = initFormulairePiece();
        String message ="êtes-vous sûr de vouloir supprimer cette pièce du stock ? \n cette opreation est irreversible";
        String titre = "Suppréssion de la pièce";
        int confirmation = JOptionPane.showConfirmDialog(this.conteneurStockJP,message,titre,JOptionPane.WARNING_MESSAGE);
        
        if(JOptionPane.OK_OPTION == confirmation )
        {
            
            this.fs.removePiece(selectedPiece().getId_piece());
            this.pieceList.remove(f.getPiece());
            
            updatePieceList();
            
            
            message ="La piece a etée supprimer du stock";
            JOptionPane.showMessageDialog(this.conteneurStockJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
            
        }
        else
        {
            message ="L'operation de suppression annulée";
            JOptionPane.showMessageDialog(this.conteneurStockJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
           
        }
        this.resetFormulairePiece();
    }//GEN-LAST:event_supprimerPieceJBActionPerformed

    private void piecesJTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_piecesJTableMousePressed
           supprimerPieceJB.setEnabled(true);
           modifierPieceJB.setEnabled(true);
           ajouterPieceJB.setEnabled(false);
           
           
    }//GEN-LAST:event_piecesJTableMousePressed

    private void factureJMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factureJMIActionPerformed
        changerCard("facturesCard");
    }//GEN-LAST:event_factureJMIActionPerformed

    private void ajouterProfessionnelJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterProfessionnelJBActionPerformed
        ajouterProfessionnelJtableRow();
        resetFormulaireProfessionnel();
    }//GEN-LAST:event_ajouterProfessionnelJBActionPerformed

    private void modifierProfessionnelJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierProfessionnelJBActionPerformed
        String message ="êtes-vous sûr de vouloir modifier cette fiche client?";
        String titre = "Modification de la fiche";
        
        int confirmation = JOptionPane.showConfirmDialog(this.conteneurProfessionnelJP,message,titre,JOptionPane.OK_CANCEL_OPTION);
        
        if(JOptionPane.OK_OPTION == confirmation )
        {
                FormulaireProfessionnel f = initFormulaireProfessionnel();
                Professionnel newProfessionnel = null ;  
                if(f.hydrate().isEmpty())
                {
                    newProfessionnel = f.getProfessionnel();
                    newProfessionnel.setId(selectedProfessionnel().getId());
                    this.fs.updateProfessionnel(newProfessionnel);
                    updateProfessionnelList();
                    
                    message ="La fiche a été modifiée";
                    JOptionPane.showMessageDialog(this.conteneurProfessionnelJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {
                    displayError(this.conteneurProfessionnelJP,f.validate());
                    message ="Opération Annulée";
                    JOptionPane.showMessageDialog(this.conteneurProfessionnelJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
                }
        }
        else
        {
            message ="Opération Annulée";
            JOptionPane.showMessageDialog(this.conteneurProfessionnelJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
        }
        
        resetFormulaireProfessionnel();
    }//GEN-LAST:event_modifierProfessionnelJBActionPerformed

    private void professionnelJTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_professionnelJTableMousePressed
           supprimerProfessionnelJB.setEnabled(true);
           modifierProfessionnelJB.setEnabled(true);
           ajouterProfessionnelJB.setEnabled(false);
           
    }//GEN-LAST:event_professionnelJTableMousePressed

    private void particulieJTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_particulieJTableMousePressed
           supprimerParticulieJB.setEnabled(true);
           modifierParticulieJB.setEnabled(true);
           ajouterParticulieJB.setEnabled(false);
    }//GEN-LAST:event_particulieJTableMousePressed

    private void ajouterParticulieJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterParticulieJBActionPerformed
         ajouterParticulieJtableRow();
         resetFormulaireParticulie();
          
         
    }//GEN-LAST:event_ajouterParticulieJBActionPerformed

    private void supprimerProfessionnelJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerProfessionnelJBActionPerformed
        FormulaireProfessionnel f = initFormulaireProfessionnel();
        String message ="êtes-vous sûr de vouloir supprimer ce client du répétoir client ? \n cette opreation est irreversible";
        String titre = "Suppréssion du client";
        int confirmation = JOptionPane.showConfirmDialog(this.conteneurProfessionnelJP,message,titre,JOptionPane.WARNING_MESSAGE);
        
        if(JOptionPane.OK_OPTION == confirmation )
        {
            
            this.fs.removeParticulie(selectedProfessionnel().getId());
            this.particulieList.remove(f.getProfessionnel());
            
            updateProfessionnelList();
            
            
            message ="Les information de ce client ont étés supprimer";
            JOptionPane.showMessageDialog(this.conteneurProfessionnelJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
            
        }
        else
        {
            message ="L'operation de suppression annulée";
            JOptionPane.showMessageDialog(this.conteneurProfessionnelJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
           
        }
        this.resetFormulaireProfessionnel();
    }//GEN-LAST:event_supprimerProfessionnelJBActionPerformed

    private void supprimerParticulieJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerParticulieJBActionPerformed
        FormulaireParticulie f = initFormulaireParticulie();
        String message ="êtes-vous sûr de vouloir supprimer ce client du répétoir client ? \n cette opreation est irreversible";
        String titre = "Suppréssion du client";
        int confirmation = JOptionPane.showConfirmDialog(this.conteneurParticulieJP,message,titre,JOptionPane.WARNING_MESSAGE);
        
        if(JOptionPane.OK_OPTION == confirmation )
        {
            
            this.fs.removeParticulie(selectedParticulie().getId());
            this.particulieList.remove(f.getParticulie());
            
            updateParticulieJTable();
            
            
            message ="Les information de ce client ont étés supprimer";
            JOptionPane.showMessageDialog(this.conteneurParticulieJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
            
        }
        else
        {
            message ="L'operation de suppression annulée";
            JOptionPane.showMessageDialog(this.conteneurParticulieJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
           
        }
        this.resetFormulaireParticulie();
    }//GEN-LAST:event_supprimerParticulieJBActionPerformed

    private void modifierParticulieJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierParticulieJBActionPerformed
        String message ="êtes-vous sûr de vouloir modifier cette fiche client?";
        String titre = "Modification de la fiche";
        
        int confirmation = JOptionPane.showConfirmDialog(this.conteneurParticulieJP,message,titre,JOptionPane.OK_CANCEL_OPTION);
        
        if(JOptionPane.OK_OPTION == confirmation )
        {
                FormulaireParticulie f = initFormulaireParticulie();
                Particulie  newParticulie = null ;  
                if(f.hydrate().isEmpty())
                {
                    newParticulie = f.getParticulie();
                    newParticulie.setId(selectedParticulie().getId());
                    this.fs.updateParticulie(newParticulie);
                    updateParticulieList();
                    
                    message ="La fiche a été modifiée";
                    JOptionPane.showMessageDialog(this.conteneurParticulieJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {
                    displayError(this.conteneurParticulieJP,f.validate());
                    message ="Opération Annulée";
                    JOptionPane.showMessageDialog(this.conteneurParticulieJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
                }
        }
        else
        {
            message ="Opération Annulée";
            JOptionPane.showMessageDialog(this.conteneurParticulieJP,message,titre,JOptionPane.INFORMATION_MESSAGE);
        }
        
        resetFormulaireParticulie();
    }//GEN-LAST:event_modifierParticulieJBActionPerformed

    private void ajouterFactureProfessionnelJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterFactureProfessionnelJBActionPerformed
         
            //FacturerProfessionnel f = new FacturerProfessionnel(fs,ffs);
            
             FacturerProfessionnel f = new FacturerProfessionnel(fs,ffs);
                f.ajouterObservateur(this);
                f.setVisible(true);
      
    }//GEN-LAST:event_ajouterFactureProfessionnelJBActionPerformed
    
    private void recherchePieceJTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recherchePieceJTFActionPerformed
        int column = 1;
        if(referenceJRB.isSelected())column=1;
        if(designationJRB.isSelected())column=2; 
        if(marqueJRB.isSelected())column=3;
        
        String recherche=this.recherchePieceJTF.getText().toUpperCase(Locale.FRANCE);
        
        String pattern = Pattern.compile(recherche,
                        Pattern.CASE_INSENSITIVE).toString();
       
        
        RowFilter rowFilter = RowFilter.regexFilter( 
                Pattern.compile(recherche,
                        Pattern.CASE_INSENSITIVE).toString(),column);
        sorterPiece.setRowFilter(rowFilter);  
    }//GEN-LAST:event_recherchePieceJTFActionPerformed

    private void ajouterFacturePArticulieJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterFacturePArticulieJBActionPerformed
        FacturerParticulier f;
                f = new FacturerParticulier(fs,ffs);
                f.ajouterObservateur(this);
                f.setVisible(true);
    }//GEN-LAST:event_ajouterFacturePArticulieJBActionPerformed

    private void rechercheParticulierJTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercheParticulierJTFActionPerformed
                                                        
        int column = 1;
        if(nomJRB.isSelected())column=1;
        if(prenomJRB.isSelected())column=2; 
          
        String recherche=this.rechercheParticulierJTF.getText().toUpperCase(Locale.FRANCE);
        
        String pattern = Pattern.compile(recherche,
                        Pattern.CASE_INSENSITIVE).toString();
       
        
        RowFilter rowFilter = RowFilter.regexFilter( 
                Pattern.compile(recherche,
                        Pattern.CASE_INSENSITIVE).toString(),column);
        sorterParticulie.setRowFilter(rowFilter);  
    
    }//GEN-LAST:event_rechercheParticulierJTFActionPerformed

    private void rechercheProfessionnelJTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercheProfessionnelJTFActionPerformed
                                                                
        int column = 1;
        if(siretJRB.isSelected())column=1;
        if(nomSocieteJRB.isSelected())column=2; 
          
        String recherche=this.rechercheProfessionnelJTF.getText().toUpperCase(Locale.FRANCE);
        
        String pattern = Pattern.compile(recherche,
                        Pattern.CASE_INSENSITIVE).toString();
       
        
        RowFilter rowFilter = RowFilter.regexFilter( 
                Pattern.compile(recherche,
                        Pattern.CASE_INSENSITIVE).toString(),column);
        sorterProfessionnel.setRowFilter(rowFilter);  
    }//GEN-LAST:event_rechercheProfessionnelJTFActionPerformed

    private void facturesParticulieJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facturesParticulieJTableMouseClicked
        int selectedRow = facturesParticulieJTable.getSelectedRow();
        selectedRow = facturesParticulieJTable.getRowSorter().convertRowIndexToModel(selectedRow);
        
        Long num_facture = (Long) facturesParticulieJTable.getModel().getValueAt(selectedRow,0);
        Facture f = fs.consulterFactureParticulierByNumFacture(num_facture);
        
       try {
            ffs.openFactureFile(f);
        } catch (IOException ex) {
            Logger.getLogger(FactureUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_facturesParticulieJTableMouseClicked

    private void facturesProfessionnelsJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facturesProfessionnelsJTableMouseClicked
      int selectedRow = facturesProfessionnelsJTable.getSelectedRow();
      selectedRow = facturesProfessionnelsJTable.getRowSorter().convertRowIndexToModel(selectedRow);
      
        Long num_facture = (Long) facturesProfessionnelsJTable.getModel().getValueAt(selectedRow,0);
        Facture f = fs.consulterFactureProfessionnelByNumFacture(num_facture);
        
       
            
        try {
            ffs.openFactureFile(f);
        } catch (IOException ex) {
            Logger.getLogger(FactureUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       
    }//GEN-LAST:event_facturesProfessionnelsJTableMouseClicked

    private void rechercheFactureParticulierJTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercheFactureParticulierJTFActionPerformed
        
        int column = 0;
        
        if(numeroFactureParticulierJRB.isSelected())column=0; 
        if(nomFactureParticulierJRB.isSelected())column=1;
        if(dateFacturationParticulierJRB.isSelected())column=2;
        if(dateLivraisonParticulierJRB.isSelected())column=3;
        
        String recherche=this.rechercheFactureParticulierJTF.getText().toUpperCase(Locale.FRANCE);
        
        String pattern = Pattern.compile(recherche,
                        Pattern.CASE_INSENSITIVE).toString();
       
        
        RowFilter rowFilter = RowFilter.regexFilter( 
                Pattern.compile(recherche,
                        Pattern.CASE_INSENSITIVE).toString(),column);
        sorterFactureParticulier.setRowFilter(rowFilter);  
    }//GEN-LAST:event_rechercheFactureParticulierJTFActionPerformed

    private void rechercheFactureProfessionnelJTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercheFactureProfessionnelJTFActionPerformed
        
        int column = 0;
        
        if(numeroFactureProfessionnelJRB.isSelected())column=0;
        if(siretFactureProfessionnelJRB.isSelected())column=1; 
        if(nomSocieteFactureProfessionnelJRB.isSelected())column=2;
        if(dateFacturationProfessionnelJRB.isSelected())column=3;
        if(dateLivraisonProfessionnelJRB.isSelected())column=4;
        
        String recherche=this.rechercheFactureProfessionnelJTF.getText().toUpperCase(Locale.FRANCE);
        
        String pattern = Pattern.compile(recherche,
                        Pattern.CASE_INSENSITIVE).toString();
       
        
        RowFilter rowFilter = RowFilter.regexFilter( 
                Pattern.compile(recherche,
                        Pattern.CASE_INSENSITIVE).toString(),column);
        sorterFactureProfessionnel.setRowFilter(rowFilter);  
        
    }//GEN-LAST:event_rechercheFactureProfessionnelJTFActionPerformed
    
    public void changerCard(String cardName){
        Container contentPane = this.getContentPane();
        CardLayout cl = (CardLayout) this.getContentPane().getLayout();
        cl.show(contentPane, cardName);
    
    }
    
    public Piece selectedPiece(){
        Long id_piece ;
        String reference, designation ,marque ;
        Integer quantite;
        Double prixVente,prixAchat;
       
        int row = piecesJTable.getSelectedRow();
        
        row = piecesJTable.getRowSorter().convertRowIndexToModel(row);
        id_piece = (Long)piecesJTable.getModel().getValueAt(row,0);
        reference =  (String)piecesJTable.getModel().getValueAt(row,1);
        designation =  (String)piecesJTable.getModel().getValueAt(row,2);
        marque = (String)piecesJTable.getModel().getValueAt(row,3);
        prixAchat = (Double)piecesJTable.getModel().getValueAt(row,4);
        prixVente = (Double)piecesJTable.getModel().getValueAt(row,5);
        quantite = (Integer)piecesJTable.getModel().getValueAt(row,6); 
        
        return new Piece(id_piece, reference, marque, designation, prixAchat, prixVente, quantite);
        
  
    }
    
    public void ajouterPieceJtableRow(){
       
        FormulairePiece f = initFormulairePiece();
        
        if(f.hydrate().isEmpty())
        {
            this.pieceList.add(f.getPiece());
            this.fs.addPiece(f.getPiece());
            updatePieceList();
        }
        else
        {
            displayError(this.conteneurStockJP,f.validate());
        }
        
    }
    
    public void modifierPieceJTableRow(Long id_piece ){
        FormulairePiece f = initFormulairePiece();
        Piece newPiece = null ;  
        
        if(f.hydrate().isEmpty())
        {
            newPiece = f.getPiece();
            newPiece.setId_piece(id_piece);
            this.fs.updatePiece(newPiece);
            updatePieceList();
        }
        else
        {
            displayError(this.conteneurStockJP,f.validate());
        }
        
        
    }
    
    
    public FormulairePiece initFormulairePiece(){
        FormulairePiece formulaire = new FormulairePiece(
                this.referencePieceJT.getText(),
                this.designationPieceJT.getText(),
                this.marquePieceJT.getText(),
                this.quantiteJT.getText(),
                this.prixVentePieceJT.getText(), 
                this.prixAchatPieceJT.getText()
                       
                
        );
      return formulaire;
    }
    
    public void resetFormulairePiece(){
                
                this.piecesJTable.setSelectionMode(0);
                this.modifierPieceJB.setEnabled(false);
                this.supprimerPieceJB.setEnabled(false);
                this.ajouterPieceJB.setEnabled(true);
                this.referencePieceJT.setText("");
                this.designationPieceJT.setText("");
                this.marquePieceJT.setText("");
                this.quantiteJT.setText("");
                this.prixVentePieceJT.setText("");
                this.prixAchatPieceJT.setText("");
                this.recherchePieceJTF.setText("");
    }
    
    private void displayError(Container c, String validate) {
        JOptionPane.showMessageDialog(c,validate,"Erreur",JOptionPane.ERROR_MESSAGE);
    }
     public FormulaireProfessionnel initFormulaireProfessionnel(){
        FormulaireProfessionnel formulaire = new FormulaireProfessionnel(
                this.siretJTF.getText(),
                this.nomSocieteJTF.getText(),
                this.lieuSocieteJTA.getText(),
                this.villeSocieteJTF.getText(),
                this.codePostalSocieteJTF.getText() 
                );
      return formulaire;
    }
     public FormulaireParticulie initFormulaireParticulie(){
        FormulaireParticulie formulaire = new FormulaireParticulie(
                this.nomJTF.getText(),
                this.prenomJTF.getText(),
                this.lieuJTA.getText(),
                this.villeJTF.getText(),
                this.codePostalJTF.getText() 
                );
      return formulaire;
    }
    
    public void ajouterProfessionnelJtableRow(){
       
        FormulaireProfessionnel f = initFormulaireProfessionnel();
        
        if(f.hydrate().isEmpty())
        {
            this.professionnelList.add(f.getProfessionnel());
            this.fs.addProfessionnel(f.getProfessionnel());
            updateProfessionnelList();
        }
        else
        {
            displayError(this.conteneurProfessionnelJP , f.validate());
        }
        
    }
     public void ajouterParticulieJtableRow(){
       
        FormulaireParticulie f = initFormulaireParticulie();
        
        if(f.hydrate().isEmpty())
        {
            this.particulieList.add(f.getParticulie());
            this.fs.addParticulie(f.getParticulie());
            updateParticulieJTable();
        }
        else
        {
            displayError(this.conteneurParticulieJP,f.validate());
        }
        
    }
    public void resetFormulaireProfessionnel(){
                
                this.professionnelJTable.setSelectionMode(0);
                this.modifierProfessionnelJB.setEnabled(false);
                this.supprimerProfessionnelJB.setEnabled(false);
                this.ajouterProfessionnelJB.setEnabled(true);
                this.siretJTF.setText("");
                this.nomSocieteJTF.setText("");
                this.villeSocieteJTF.setText("");
                this.lieuSocieteJTA.setText("");
                this.codePostalSocieteJTF.setText("");
                
    }
    public void resetFormulaireParticulie(){
                
                this.particulieJTable.setSelectionMode(0);
                this.modifierParticulieJB.setEnabled(false);
                this.supprimerParticulieJB.setEnabled(false);
                this.ajouterParticulieJB.setEnabled(true);
                this.nomJTF.setText("");
                this.prenomJTF.setText("");
                this.villeJTF.setText("");
                this.lieuJTA.setText("");
                this.codePostalJTF.setText("");
                
    }
    
    public void updateProfessionnelList()
    {
      professionnelList.clear();
      professionnelList.addAll(professionnelQuery.getResultList());
    }
    public void updateParticulieList()
    {
      particulieList.clear();
      particulieList.addAll(particulieQuery.getResultList());
    }
    public void updateProfessionnelFactureList()
    {
      professionnelFactureList.clear();
      professionnelFactureList.addAll(professionnelQuery.getResultList());
    }
    
    public void filterByNomSocieteProfessionnelJTable( String nomSociete )
    { 
        if(nomSociete==null || nomSociete.isEmpty())
        {
            this.updateProfessionnelFactureList();
        }
        else
        {
            professionnelFactureList.clear();
            professionnelFactureList.addAll(fs.consulterProfessionnelByNomSociete(nomSociete));
    
        } 

    }
    public void filterBySiretProfessionnelJTable( String siret )
    { 
        if(siret==null || siret.isEmpty())
        {
            this.updateProfessionnelFactureList();
        }
        else
        {
            professionnelFactureList.clear();
            professionnelFactureList.addAll(fs.consulterProfessionnelBySiret(siret));
    
        } 

    } 
    public void updateParticulieJTable()
    {
      particulieList.clear();
      particulieList.addAll(particulieQuery.getResultList());
    }    
    public Professionnel selectedProfessionnel(){
        Long id_professionnel ;
        String siret,nomSociete,lieuSociete,villeSociete  ,codePostalSociete ;
        
       
        int row = professionnelJTable.getSelectedRow();
        row = professionnelJTable.getRowSorter().convertRowIndexToModel(row);
        id_professionnel = (Long)professionnelJTable.getModel().getValueAt(row,0);
        siret = (String)professionnelJTable.getModel().getValueAt(row,1);
        nomSociete =  (String)professionnelJTable.getModel().getValueAt(row,2);
        lieuSociete =  (String)professionnelJTable.getModel().getValueAt(row,3);
        villeSociete = (String)professionnelJTable.getModel().getValueAt(row,4);
        codePostalSociete = (String)professionnelJTable.getModel().getValueAt(row,5);
       
        Adresse adresse = new Adresse(lieuSociete,villeSociete,codePostalSociete);
        return new Professionnel(id_professionnel, siret, nomSociete,adresse );
        
  
    }
    
     public Professionnel selectedParticulie(){
        Long id_particulie ;
        String nom,prenom,lieu,ville  ,codePostal;
        
       
        int row = this.particulieJTable.getSelectedRow();
        
        row = particulieJTable.getRowSorter().convertRowIndexToModel(row);
        id_particulie = (Long)particulieJTable.getModel().getValueAt(row,0);
        nom = (String)particulieJTable.getModel().getValueAt(row,1);
        prenom =  (String)particulieJTable.getModel().getValueAt(row,2);
        lieu=  (String)particulieJTable.getModel().getValueAt(row,3);
        ville = (String)particulieJTable.getModel().getValueAt(row,4);
        codePostal= (String)particulieJTable.getModel().getValueAt(row,5);
       
        Adresse adresse = new Adresse(lieu,ville,codePostal);
        return new Professionnel(id_particulie, nom, prenom,adresse );
        
  
    }
     public void updatePieceList()
    {
      pieceList.clear();
      pieceList.addAll(pieceQuery.getResultList());
    }    
    private void updateFactureProfessionelList() {
       factureProfessionnelList.clear();
        factureProfessionnelList.addAll(factureProfessionnelQuery.getResultList()); 
    }           
    private void updateFactureParticulierList() {
        factureParticulierList.clear();
        factureParticulierList.addAll(factureParticulierQuery.getResultList()); 
    }
   
   
    

    @Override
    public void update() {
       this.updatePieceList();
       this.updateParticulieList();
       this.updateProfessionnelList();
       this.updateFactureProfessionelList();
       this.updateFactureParticulierList();
    }  
    
   
    
    
    public Date convertStringToDate(String dateString)
    {
        Date date =null;  
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
           
           try {
               date = dateFormat.parse(dateString);
               
           } catch (ParseException ex) {
               Logger.getLogger(FactureUI.class.getName()).log(Level.SEVERE, null, ex);
           }
    
           return date;
    
    }
    
    public String convertDateToString(Date date){
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        return dateFormat.format(date);
    }
     
   
     
        
      
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu accueilJM;
    private javax.swing.JPanel ajoutModificationJP;
    private javax.swing.JPanel ajouterFactureJP;
    private javax.swing.JButton ajouterFacturePArticulieJB;
    private javax.swing.JButton ajouterFactureProfessionnelJB;
    private javax.swing.JButton ajouterParticulieJB;
    private javax.swing.JPanel ajouterParticulieJP;
    private javax.swing.JButton ajouterPieceJB;
    private javax.swing.JButton ajouterProfessionnelJB;
    private javax.swing.JMenuBar appJMenuBar;
    private javax.swing.JMenuItem clientsJMI;
    private javax.swing.JPanel clientsJP;
    private javax.swing.JTabbedPane clientsJTP;
    private javax.swing.JLabel codePostalJL;
    private javax.swing.JTextField codePostalJTF;
    private javax.swing.JLabel codePostalSocieteJL;
    private javax.swing.JTextField codePostalSocieteJTF;
    private javax.swing.JPanel conteneurParticulieJP;
    private javax.swing.JPanel conteneurProfessionnelJP;
    private javax.swing.JPanel conteneurStockJP;
    private javax.swing.JRadioButton dateFacturationParticulierJRB;
    private javax.swing.JRadioButton dateFacturationProfessionnelJRB;
    private javax.swing.JRadioButton dateLivraisonParticulierJRB;
    private javax.swing.JRadioButton dateLivraisonProfessionnelJRB;
    private javax.swing.JLabel designationJL;
    private javax.swing.JRadioButton designationJRB;
    private javax.swing.JTextField designationPieceJT;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JMenuItem factureJMI;
    private java.util.List<facturation.entities.Facture> factureParticulierList;
    private javax.persistence.Query factureParticulierQuery;
    private javax.swing.JPanel facturePriticulieJP;
    private javax.swing.JPanel factureProfessionnelJP;
    private java.util.List<facturation.entities.Facture> factureProfessionnelList;
    private javax.persistence.Query factureProfessionnelQuery;
    private javax.swing.JPanel facturesCardJP;
    private javax.swing.JTabbedPane facturesJTabbedPane;
    private javax.swing.JScrollPane facturesParticulieJSP;
    private javax.swing.JTable facturesParticulieJTable;
    private javax.swing.JScrollPane facturesProfessionnelsJSP;
    private javax.swing.JTable facturesProfessionnelsJTable;
    private javax.swing.ButtonGroup filtreFactureParticulierBG;
    private javax.swing.ButtonGroup filtreFactureProfessionnelBG;
    private javax.swing.ButtonGroup filtrePieceBG;
    private javax.swing.ButtonGroup filtreProfessionnelBG;
    private javax.swing.ButtonGroup fitreParticulierBG;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel lieuJL;
    private javax.swing.JScrollPane lieuJSP;
    private javax.swing.JTextArea lieuJTA;
    private javax.swing.JLabel lieuSocieteJL;
    private javax.swing.JScrollPane lieuSocieteJSP;
    private javax.swing.JTextArea lieuSocieteJTA;
    private javax.swing.JLabel marqueJL;
    private javax.swing.JRadioButton marqueJRB;
    private javax.swing.JTextField marquePieceJT;
    private javax.swing.JButton modifierParticulieJB;
    private javax.swing.JButton modifierPieceJB;
    private javax.swing.JButton modifierProfessionnelJB;
    private javax.swing.JRadioButton nomFactureParticulierJRB;
    private javax.swing.JLabel nomJL;
    private javax.swing.JRadioButton nomJRB;
    private javax.swing.JTextField nomJTF;
    private javax.swing.JRadioButton nomSocieteFactureProfessionnelJRB;
    private javax.swing.JLabel nomSocieteJL;
    private javax.swing.JRadioButton nomSocieteJRB;
    private javax.swing.JTextField nomSocieteJTF;
    private javax.swing.JRadioButton numeroFactureParticulierJRB;
    private javax.swing.JRadioButton numeroFactureProfessionnelJRB;
    private javax.swing.JTable particulieJTable;
    private java.util.List particulieList;
    private javax.persistence.Query particulieQuery;
    private javax.swing.JPanel particuliesJP;
    private javax.swing.JScrollPane particuliesJSP;
    private javax.swing.JPanel particuliesTabJP;
    private java.util.List<facturation.entities.Piece> pieceList;
    private javax.persistence.Query pieceQuery;
    private javax.swing.JPanel piecesCardJP;
    private javax.swing.JMenuItem piecesJMI;
    private javax.swing.JScrollPane piecesJSP;
    private javax.swing.JTable piecesJTable;
    private javax.swing.JLabel prenomJL;
    private javax.swing.JRadioButton prenomJRB;
    private javax.swing.JTextField prenomJTF;
    private javax.swing.JLabel prixAchatJL;
    private javax.swing.JTextField prixAchatPieceJT;
    private javax.swing.JLabel prixVenteJL;
    private javax.swing.JTextField prixVentePieceJT;
    private java.util.List professionnelFactureList;
    private javax.swing.JTable professionnelJTable;
    private java.util.List professionnelList;
    private javax.persistence.Query professionnelQuery;
    private javax.swing.JPanel professionnelsJP;
    private javax.swing.JScrollPane professionnelsJSP;
    private javax.swing.JPanel professionnelsTabJP;
    private javax.swing.JLabel quantiteJL;
    private javax.swing.JTextField quantiteJT;
    private javax.swing.JPanel rechercheFactureParticulierJP;
    private javax.swing.JTextField rechercheFactureParticulierJTF;
    private javax.swing.JPanel rechercheFactureProfessionnelJP;
    private javax.swing.JTextField rechercheFactureProfessionnelJTF;
    private javax.swing.JPanel rechercheParticulierJP;
    private javax.swing.JTextField rechercheParticulierJTF;
    private javax.swing.JPanel recherchePieceJP;
    private javax.swing.JTextField recherchePieceJTF;
    private javax.swing.JPanel rechercheProfessionnelJP;
    private javax.swing.JTextField rechercheProfessionnelJTF;
    private javax.swing.JRadioButton referenceJRB;
    private javax.swing.JTextField referencePieceJT;
    private javax.swing.JLabel refernceJL;
    private javax.swing.JRadioButton siretFactureProfessionnelJRB;
    private javax.swing.JLabel siretJL;
    private javax.swing.JRadioButton siretJRB;
    private javax.swing.JTextField siretJTF;
    private javax.swing.JPanel stockJP;
    private javax.swing.JButton supprimerParticulieJB;
    private javax.swing.JButton supprimerPieceJB;
    private javax.swing.JButton supprimerProfessionnelJB;
    private javax.swing.JLabel villeJL;
    private javax.swing.JTextField villeJTF;
    private javax.swing.JLabel villeSocieteJL;
    private javax.swing.JTextField villeSocieteJTF;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

 
    /* 
   
    
    protected boolean isUnique(Piece p )
    {
     boolean isUnique = false;
     String erreur = "Ce Piece a dèja été ajouter au produits à facturés \n Si vous voulez le modifier veuiller le retirer de la liste des produits à facturés ";;
     boolean contain =false;
     for(Ligne ligne : lignes)
     {
         contain = contain ||(ligne.getPiece().getId_piece() ==  p.getId_piece());
     }
     
     if(contain)
        {
                  // JOptionPane.showMessageDialog(facturesJPanel.getRootPane(), erreur,null,JOptionPane.ERROR_MESSAGE);
        }
      else
        {
                  isUnique = true;  
                
        }
                
     return isUnique;
    
    }
    
   
    
   
    
    
    
    protected void displayErrorJTextField(javax.swing.JTextField champ)
    {
       champ.requestFocus();
    } 
    
    
    
    protected void displayErrorJTextArea(javax.swing.JTextArea champ)
    {
       champ.requestFocus();
    } 
    
    
    
    
    
   
    
   
    
  
    protected boolean isCPValide(javax.swing.JTextField champ)
    {
        boolean isValide = false;
        String erreur ="La ville ne peut être vide";
        
        if(champ.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(champ.getRootPane(), erreur);
        }
        else
        {   
            Pattern p = Pattern.compile("^[0-9][0-9]{4}$",
            Pattern.CASE_INSENSITIVE);
            
            Matcher m = p.matcher(champ.getText());
            if(m.matches())
            {
                isValide =true;
            }
            else
            {
                erreur = "Le code postale n'est pas valide";
                JOptionPane.showMessageDialog(champ.getRootPane(), erreur);
            }
            
        }
        
        
        if(!isValide)
        {
            displayErrorJTextField(champ);
        }
       
        
        return isValide;   
    
    }
    
   
    
   */
   

    

   
    
   
    
}   

